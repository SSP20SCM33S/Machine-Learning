# -*- coding: utf-8 -*-
"""GC_AS3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LEAk2RM1GTmTtoPeO6ib0Yxa9Xc0rXSy
"""

from keras.datasets import imdb
import numpy as np
from keras import models
from keras import layers
from keras import optimizers
from keras import losses
from keras import metrics
import matplotlib.pyplot as plt

def vectorize(sequences, dimension=10000):
    results = np.zeros((len(sequences),dimension))
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1
    return results
    
def main():
    (train_data, train_op), (test_data, test_op) = imdb.load_data(num_words=10000)
    x_train = vectorize(train_data)
    x_test = vectorize(test_data)
    y_train = np.asarray(train_op).astype('float32')
    y_test = np.asarray(test_op).astype('float32')
    x1 = x_train[:10000]
    x2 = x_train[10000:]
    y1 = y_train[:10000]
    y2 = y_train[10000:]
    model = models.Sequential()
    model.add(layers.Dense(16, activation='tanh',input_shape=(10000,)))
    model.add(layers.Dense(16, activation='tanh'))
    model.add(layers.Dense(16, activation='tanh',input_shape=(10000,)))
    model.add(layers.Dense(1, activation='sigmoid'))
    model.compile(
        optimizer = optimizers.RMSprop(lr=0.00005),
        loss = losses.binary_crossentropy,
        metrics = [metrics.binary_accuracy])
    history = model.fit(x2,y2,epochs=20,batch_size=512,validation_data=(x1,y1))
    history_dict = history.history
    print(history_dict.keys())
    loss_values = history_dict['loss']
    val_loss_values = history_dict['val_loss']
    epochs = range(1,21)
    plt.plot(epochs,loss_values,'bo', label='Train Loss')
    plt.plot(epochs,val_loss_values,'b', label='Validation Loss')
    plt.title('Training and Validation Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.show
    #Plotting accuracy
    plt.clf()
    acc_values = history_dict['binary_accuracy']
    val_acc_values = history_dict['val_binary_accuracy']
    plt.plot(epochs,acc_values,'bo', label='Train Loss')
    plt.plot(epochs,val_acc_values,'b', label='Validation Loss')
    plt.title('Training and Validation Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.show

    model = models.Sequential()
    model.add(layers.Dense(16, activation='tanh',input_shape=(10000,)))
    model.add(layers.Dense(16, activation='tanh'))
    model.add(layers.Dense(1, activation='sigmoid'))
    model.compile(
        optimizer = optimizers.RMSprop(lr=0.00005),
        loss = losses.binary_crossentropy,
        metrics = [metrics.binary_accuracy])
    model.fit(x_train,y_train, epochs=7,batch_size=512)
    results = model.evaluate(x_test, y_test)


if __name__ == "__main__":
  main()

